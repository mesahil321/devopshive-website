name: Build and Deploy to AWS Fargate

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        working-directory: ./devopshive-website
        run: npm ci

      - name: Build Next.js App
        working-directory: ./devopshive-website
        run: npm run build

      - name: Prepare Docker Build Context
        run: |
          mkdir docker-build
          cp -r ./devopshive-website/.next docker-build/
          cp -r ./devopshive-website/public docker-build/
          cp -r ./devopshive-website/node_modules docker-build/
          cp ./devopshive-website/package.json docker-build/
          cp ./devopshive-website/next.config.js docker-build/ || true

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Build, Tag, and Push Docker Image to ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      #   run: |
      #     IMAGE_TAG=latest
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG docker-build
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Deploy to ECS
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ secrets.ECS_TASK_DEFINITION }}
      #     service: ${{ secrets.ECS_SERVICE }}
      #     cluster: ${{ secrets.ECS_CLUSTER }}
      #     wait-for-service-stability: true
